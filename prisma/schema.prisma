generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum PaymentInterval {
    monthly
    yearly
}

enum AccountType {
    advanced
    basic
    senior_basic
}

enum Audience {
    IDD
    SENIOR
}

enum MentionType {
    member
    admin
    group
}

enum State {
    AL
    AK
    AZ
    AR
    CA
    CO
    CT
    DE
    FL
    GA
    HI
    ID
    IL
    IN
    IA
    KS
    KY
    LA
    ME
    MD
    MA
    MI
    MN
    MS
    MO
    MT
    NE
    NV
    NH
    NJ
    NM
    NY
    NC
    ND
    OH
    OK
    OR
    PA
    RI
    SC
    SD
    TN
    TX
    UT
    VA
    VT
    WA
    WV
    WI
    WY
    DC
}

// AUTH RESOURCES

model user_session {
    user_id    String   @id
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model user_organization_access {
    // Fields
    user_id         String
    organization_id String

    // Relations
    user         user         @relation(fields: [user_id], references: [id])
    organization organization @relation(fields: [organization_id], references: [id])

    // Indexes
    @@unique([user_id, organization_id])
    @@index([user_id])
    @@index([organization_id])
}

// USER RESOURCES

model user {
    //Fields
    id                         String        @id @default(uuid())
    auth_id                    String?       @unique
    email                      String?       @unique
    preferred_name             String?
    first_name                 String?
    last_name                  String?
    organization               String?
    role                       String?
    type                       String?
    customer                   String?
    setup_complete             Boolean       @default(false)
    utm                        String?
    address                    String?
    date_of_birth              DateTime?     @db.Date
    delete_date                DateTime?
    profile_pic_url            String?       @db.VarChar(600)
    profile_pic_url_expires_at DateTime?
    accessing_organization_id  String?
    phone_number               String?
    gender                     String?
    audit_events               audit_event[]
    auth_role_id               String?

    // Relations
    subscription_relation                         subscription?                                   @relation(fields: [customer], references: [id])
    livestream                                    livestream[]
    organizations                                 organization[]
    weekly_goals                                  weekly_goal[]
    courses                                       course[]
    daily_streak                                  daily_streak[]
    schedule                                      schedule[]
    notes                                         note[]                                          @relation("user_note")
    admin_notes                                   note[]                                          @relation("admin_note")
    appointment                                   appointment[]                                   @relation("appointment_user")
    created_appointments                          appointment[]                                   @relation("appointment_created_by")
    transport                                     transport[]                                     @relation("user_transport")
    admin_transport                               transport[]                                     @relation("admin_transport")
    attendance                                    attendance[]                                    @relation("attendance_user")
    admin_attendance                              attendance[]                                    @relation("attendance_admin")
    sales_dashboard_billing_details               sales_dashboard_billing_details[]
    emergency_contacts                            emergency_contact[]
    user_personal_info                            user_personal_info?                             @relation("user_personal_info")
    user_identifiers                              user_identifier[]
    time_tracking_events                          time_tracking_event[]                           @relation("time_tracking_event_member")
    time_tracking_events_created                  time_tracking_event[]                           @relation("time_tracking_event_creator")
    task                                          task[]
    task_assignee                                 task_assignee[]
    group_members                                 group_members[]
    group_admins                                  group_admins[]
    member_mention                                mention[]                                       @relation("member_mention")
    admin_mention                                 mention[]                                       @relation("admin_mention")
    quick_note                                    quick_note[]
    member_service_records                        service_record[]                                @relation("service_record_member")
    admin_service_records                         service_record[]                                @relation("service_record_admin")
    signer_service_records                        service_record[]                                @relation("service_record_signer")
    member_custom_documentation                   custom_documentation[]                          @relation("custom_documentation_member")
    admin_custom_documentation                    custom_documentation[]                          @relation("custom_documentation_admin")
    group_service_record_summary_report_recipient group_service_record_summary_report_recipient[]
    group_time_tracking_summary_report_recipient  group_time_tracking_summary_report_recipient[]
    user_organization_access                      user_organization_access[]
    ai_service_record_interaction_log             ai_service_record_interaction_log[]             @relation("ai_user")
    pharmacy                                      medication[]
    medication_administration_record              medication_administration_record[]
    mars_created                                  medication_administration_record[]              @relation("mar_creator")
    forms                                         form[]                                          @relation(name: "form_member")
    forms_authored                                form[]                                          @relation(name: "form_author")
    custom_fields                                 custom_field_value[]
    auth_role                                     auth_role?                                      @relation(fields: [auth_role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    saved_stories                                 saved_story[]
    activity_views                                activity_view[]
    activity_viewer                               activity[]                                      @relation("activity_viewer")
    saved_coloring_page                           saved_coloring_page[]
    life_plan_goal                                life_plan_goal[]
    life_plan_goal_task                           life_plan_goal_task[]
    folders                                       folder[]
    files                                         file[]
    service_records_updated                       service_record[]                                @relation("service_record_last_updated_by")
    ai_chat_feedback                               ai_chat_feedback[]

    @@index([customer])
    @@index([auth_role_id])
}

model user_personal_info {
    memberId                  String  @id
    bio                       String? @db.Text
    hobbies                   String? @db.Text
    dislikes                  String? @db.Text
    favorite_relationships    String? @db.Text
    challenging_relationships String? @db.Text
    tips_and_guides           String? @db.Text

    member user @relation("user_personal_info", fields: [memberId], references: [id])

    @@index([memberId])
}

model emergency_contact {
    id                  String  @id @default(uuid())
    memberId            String
    first_name          String
    last_name           String
    phone_number        String
    email               String?
    type                String?
    is_medical_guardian Boolean @default(false)

    member user @relation(fields: [memberId], references: [id])

    @@index([memberId])
}

model user_identifier {
    id         String  @id @default(uuid())
    memberId   String
    identifier String // the actual value (e.x. 0001234)
    system     String? // the system id or slug (e.x. ssn)
    display    String // the display name of the system (e.x. Social Security Number)

    member user @relation(fields: [memberId], references: [id])

    @@index([memberId])
}

enum custom_field_type {
    TEXT
    PARAGRAPH
    NUMERICAL
    BOOLEAN
    DATE
    SELECT
    MULTISELECT
}

model custom_field {
    // Fields
    id              String            @id // cf_{id}
    organization_id String?
    name            String
    type            custom_field_type
    options         Json?
    is_public       Boolean           @default(false)
    created_at      DateTime          @default(now())
    updated_at      DateTime          @updatedAt
    deleted_at      DateTime?

    // Relations
    organization_custom_fields organization_custom_field[]
    custom_field_values        custom_field_value[]
    custom_field_library_items custom_field_library_item[]
}

model custom_field_library {
    // Fields
    id          String  @id @default(uuid()) // cfl_{id}
    name        String
    description String?

    // Relations
    custom_fields custom_field_library_item[]
}

model custom_field_library_item {
    // Fields
    library_id      String
    custom_field_id String

    // Relations
    library      custom_field_library @relation(fields: [library_id], references: [id])
    custom_field custom_field         @relation(fields: [custom_field_id], references: [id])

    // Indexes
    @@id([library_id, custom_field_id])
    @@index([library_id])
    @@index([custom_field_id])
}

model organization_custom_field {
    // Fields
    organization_id String
    custom_field_id String

    // Relations
    organization organization @relation(fields: [organization_id], references: [id])
    custom_field custom_field @relation(fields: [custom_field_id], references: [id])

    // Indexes
    @@id([organization_id, custom_field_id])
    @@index([organization_id])
    @@index([custom_field_id])
}

model custom_field_value {
    // Fields
    user_id         String
    organization_id String
    custom_field_id String
    data            Json // { value: string | number | boolean | string[] | Date }
    created_at      DateTime @default(now())
    updated_at      DateTime @updatedAt

    // Relations
    member       user         @relation(fields: [user_id], references: [id])
    custom_field custom_field @relation(fields: [custom_field_id], references: [id])

    // Indexes
    @@id([user_id, custom_field_id])
    @@index([user_id])
    @@index([custom_field_id])
}

// ORGANIZATION RESOURCES

model organization {
    //Fields 
    id                    String        @id @default(uuid())
    name                  String        @unique
    address               String?
    state                 State         @default(CT)
    contact               String
    contact_relation      user          @relation(fields: [contact], references: [id])
    subscription          String?
    subscription_relation subscription? @relation(fields: [subscription], references: [id])
    is_metered_billing    Boolean
    is_oauth_connection   Boolean       @default(false)
    time_zone             String        @default("America/New_York")
    audience              Audience      @default(IDD)
    hubspot_id            String?
    start_date            DateTime?
    looker_report_url     String?

    // Relations
    features                                      feature_flags?
    billing_details                               billing_details?
    livestream                                    livestream[]
    organization_note_template                    organization_note_template[]
    organization_groups                           organization_group[]
    service_record                                service_record[]
    custom_documentation                          custom_documentation[]
    group_service_record_reminder                 group_service_record_reminder[]
    group_service_record_summary_report_recipient group_service_record_summary_report_recipient[]
    group_time_tracking_reminder                  group_time_tracking_reminder[]
    group_time_tracking_summary_report_recipient  group_time_tracking_summary_report_recipient[]
    group_time_tracking_stop_time                 group_time_tracking_stop_time[]
    user_organization_access                      user_organization_access[]
    forms                                         form[]
    form_template_organization                    form_template_organization[]
    medications                                   medication[]
    custom_fields                                 organization_custom_field[]
    auth_role                                     auth_role[]
    chat_templates                                chat_template[]
    activity                                      activity[]
    activity_view                                 activity_view[]
    saved_coloring_page                           saved_coloring_page[]
    life_plan_goal                                life_plan_goal[]
    life_plan_goal_task                           life_plan_goal_task[]
    life_plan_task_option_library                 life_plan_task_option_library[]
    folder                                        folder[]
    file                                          file[]
    ai_chat_feedback                               ai_chat_feedback[]

    // Indexes
    @@index([contact])
    @@index([subscription])
}

model billing_details {
    id                    Int             @id @default(autoincrement())
    organization          organization    @relation(fields: [organizationId], references: [id])
    organizationId        String          @unique
    paymentInterval       PaymentInterval
    adminSeatPriceId      String?
    numAdminSeats         Int             @default(1)
    individualSeatPriceId String?
    numIndividualSeats    Int?
}

model feature_flags {
    id                     Int          @id @default(autoincrement())
    organization           organization @relation(fields: [organizationId], references: [id])
    organizationId         String       @unique
    premium                Boolean
    individuals            Boolean      @default(false)
    individualsWithAccount Boolean      @default(false)
    dashboard              Boolean      @default(false)
    usageTable             Boolean      @default(false)
    classSessions          Boolean      @default(false)
}

enum activity_type {
    VIDEO
    LIVESTREAM
}

model activity {
    id                String         @id @default(uuid())
    user              String? //deprecated
    livestream        String? //deprecated
    video             String? //deprecated
    name              String         @default("Activity")
    duration          Float
    updated_at        DateTime?      @updatedAt
    created_at        DateTime
    admin             String? //deprecated
    note              String? //deprecated
    service_record_id String? //deprecated
    view_id           String?
    type              activity_type?
    asset_id          String?
    viewer_id         String?
    organization_id   String?

    viewer_relation       user?           @relation(name: "activity_viewer", fields: [viewer_id], references: [id])
    organization_relation organization?   @relation(fields: [organization_id], references: [id])
    activity_views        activity_view[]

    @@index([viewer_id])
    @@index([type])
    @@index([asset_id])
    @@index([organization_id])
}

model activity_view {
    id                String   @id @default(uuid())
    activity_id       String
    viewer_id         String
    service_record_id String?
    created_at        DateTime @default(now())
    organization_id   String?

    // Relations
    activity       activity        @relation(fields: [activity_id], references: [id])
    viewer         user            @relation(fields: [viewer_id], references: [id])
    service_record service_record? @relation(fields: [service_record_id], references: [id])
    organization   organization?   @relation(fields: [organization_id], references: [id])

    @@index([activity_id])
    @@index([viewer_id])
    @@index([service_record_id])
    @@index([created_at])
    @@index([organization_id])
}

model livestream {
    id                    String        @id @default(uuid())
    title                 String
    description           String        @db.Text
    instructor            String
    instructor_relation   user          @relation(fields: [instructor], references: [id])
    duration              Int
    organization          String        @default("Kibu")
    organization_relation organization? @relation(fields: [organization], references: [id])
    time                  DateTime
    active                Boolean       @default(false)
    mux_space_id          String?
    isOpenTwoWay          Boolean       @default(false)
    schedule              schedule[]

    @@index([instructor])
    @@index([organization])
}

model subscription {
    id           String         @id // the stripe customer id
    status       String
    subscription String
    organization organization[]
    user         user[]
}

model library {
    user_id    String
    video      String
    date_added DateTime @updatedAt

    @@id([user_id, video])
}

model utm {
    user_id      String  @id
    utm_source   String?
    utm_medium   String?
    utm_campaign String?
}

model config {
    name  String  @id
    value String? @db.Text
}

model weekly_goal {
    user_id           String
    user_relation     user     @relation(fields: [user_id], references: [id])
    first_day_of_week DateTime
    goal              Int
    total_activity    Int
    has_been_notified Boolean?

    @@id([user_id, first_day_of_week])
    @@index([user_id])
}

model gift {
    email        String   @id
    display_name String?
    months       Int
    comment      String?  @db.VarChar(75)
    updated_at   DateTime @updatedAt
}

enum course_status {
    NOT_STARTED
    IN_PROGRESS
    COMPLETE
}

model course {
    id            String            @id @default(uuid())
    user_id       String
    user_relation user              @relation(fields: [user_id], references: [id])
    status        course_status
    progress      course_progress[]
    createdAt     DateTime
    completedAt   DateTime?

    @@index([user_id])
}

model course_progress {
    course_id   String
    video       String
    watch_time  Int?
    completedAt DateTime?
    course      course    @relation(fields: [course_id], references: [id])

    @@id([course_id, video])
    @@index([course_id])
}

model daily_streak {
    user_id       String    @id
    streak        Int       @default(0)
    longestStreak Int       @default(0)
    last_activity DateTime?
    user          user      @relation(fields: [user_id], references: [id])

    @@index([user_id])
}

model schedule {
    user_id       String
    livestream_id String
    batch_id      String?
    date_added    DateTime   @updatedAt
    livestream    livestream @relation(fields: [livestream_id], references: [id])
    user          user       @relation(fields: [user_id], references: [id])

    @@id([user_id, livestream_id])
    @@index([livestream_id])
    @@index([user_id])
}

enum note_status {
    INCOMPLETE
    DRAFT
    IN_PROGRESS
    IN_REVIEW
    COMPLETE
    NEEDS_REVISION
}

enum note_type {
    ONE_OFF_NOTE
    FINAL_NOTE
}

// Deprecated
model note {
    id               String                      @id @default(uuid())
    user_id          String
    progress_review  String?                     @db.Text
    additional_notes String?                     @db.Text
    duration_hr      Float?
    admin_id         String
    status           note_status
    date             DateTime
    date_signed      DateTime?                   @default(now())
    templateId       Int?
    templateData     Json?
    user             user                        @relation(name: "user_note", fields: [user_id], references: [id])
    admin            user                        @relation(name: "admin_note", fields: [admin_id], references: [id])
    template         organization_note_template? @relation(fields: [templateId], references: [id])
    attendance       attendance[]
    note_type        note_type?

    @@index([user_id])
    @@index([admin_id])
    @@index([templateId])
}

model appointment {
    id          String    @id @default(uuid())
    user_id     String
    start       DateTime
    location    String
    description String    @db.Text
    created_at  DateTime  @default(now())
    updated_at  DateTime  @default(now()) @updatedAt
    deleted_at  DateTime?
    group_id    String    @default("")
    created_by  String?

    creator user? @relation(fields: [created_by], references: [id], name: "appointment_created_by")
    user    user  @relation(fields: [user_id], references: [id], name: "appointment_user")

    @@index([user_id])
    @@index([created_by])
}

enum transport_status {
    SCHEDULED
    IN_PROGRESS
    COMPLETE
    CANCELED
}

enum transport_type {
    AM
    PM
    ROUND_TRIP
}

model transport {
    id             String           @id @default(uuid())
    user_id        String
    admin_id       String?
    start          DateTime
    start_location String?
    end_location   String?
    distance_mi    Float?
    created_at     DateTime         @default(now())
    updated_at     DateTime         @default(now()) @updatedAt
    deleted_at     DateTime?
    group_id       String           @default("")
    status         transport_status
    type           transport_type?
    user           user             @relation(name: "user_transport", fields: [user_id], references: [id])
    admin          user?            @relation(name: "admin_transport", fields: [admin_id], references: [id])

    @@index([user_id])
    @@index([admin_id])
}

model organization_program {
    id             Int    @id @default(autoincrement())
    organizationId String
    name           String

    @@index([organizationId])
}

// GROUP RESOURCES

model organization_group {
    // Fields
    id             String    @id @default(uuid())
    programId      Int?
    name           String
    organizationId String
    isDefaultGroup Boolean   @default(false)
    deletedAt      DateTime?
    icon           String    @default("🏠")

    // Relations
    organization                                  organization                                    @relation(fields: [organizationId], references: [id])
    group_admins                                  group_admins[]
    group_members                                 group_members[]
    mention                                       mention[]
    service_record                                service_record[]
    group_settings                                group_settings?
    time_tracking_event                           time_tracking_event[]
    group_service_record_reminder                 group_service_record_reminder[]
    group_service_record_summary_report_recipient group_service_record_summary_report_recipient[]
    group_time_tracking_reminder                  group_time_tracking_reminder[]
    group_time_tracking_summary_report_recipient  group_time_tracking_summary_report_recipient[]
    group_time_tracking_stop_time                 group_time_tracking_stop_time[]
    life_plan_goal_group                          life_plan_goal_group[]

    // Indexes
    @@index([organizationId])
    @@index([programId])
}

enum default_admin_type {
    YOU
    PREVIOUS
}

model group_settings {
    // Fields
    group_id                           String             @id
    enable_service_records             Boolean            @default(true)
    use_attendance                     Boolean            @default(true)
    use_time_tracking                  Boolean            @default(true)
    require_documentation              Boolean            @default(true)
    required_documentation_template_id Int                @default(0)
    rounding_scheme                    String             @default("round_total_time_15")
    allow_additional_documentation     Boolean            @default(false)
    default_admin_for_service_record   default_admin_type @default(YOU)

    // Relations
    group                      organization_group          @relation(fields: [group_id], references: [id])
    organization_note_template organization_note_template? @relation(fields: [required_documentation_template_id], references: [id])

    // Indexes
    @@index([group_id])
    @@index([required_documentation_template_id])
}

model group_service_record_reminder {
    // Fields
    id              Int     @id @default(autoincrement())
    group_id        String
    organization_id String
    hour            Int
    minute          Int
    time_zone       String
    utc_hour        Int
    send_if_empty   Boolean @default(true)

    // Relations
    organization organization       @relation(fields: [organization_id], references: [id])
    group        organization_group @relation(fields: [group_id], references: [id])

    // Indexes
    @@index([group_id])
    @@index([organization_id])
}

model group_service_record_summary_report_recipient {
    // Fields
    id              Int    @id @default(autoincrement())
    group_id        String
    admin_id        String
    organization_id String

    // Relations
    admin        user               @relation(fields: [admin_id], references: [id])
    group        organization_group @relation(fields: [group_id], references: [id])
    organization organization       @relation(fields: [organization_id], references: [id])

    // Indexes
    @@index([group_id])
    @@index([admin_id])
    @@index([organization_id])
}

model group_time_tracking_reminder {
    // Fields
    id              Int     @id @default(autoincrement())
    group_id        String
    organization_id String
    hour            Int
    minute          Int
    time_zone       String
    utc_hour        Int
    send_if_empty   Boolean @default(true)

    // Relations
    organization organization       @relation(fields: [organization_id], references: [id])
    group        organization_group @relation(fields: [group_id], references: [id])

    // Indexes
    @@index([group_id])
    @@index([organization_id])
}

model group_time_tracking_summary_report_recipient {
    // Fields
    id              Int    @id @default(autoincrement())
    group_id        String
    admin_id        String
    organization_id String

    // Relations
    admin        user               @relation(fields: [admin_id], references: [id])
    group        organization_group @relation(fields: [group_id], references: [id])
    organization organization       @relation(fields: [organization_id], references: [id])

    // Indexes
    @@index([group_id])
    @@index([admin_id])
    @@index([organization_id])
}

model group_time_tracking_stop_time {
    // Fields
    group_id        String @id
    organization_id String
    hour            Int
    minute          Int
    time_zone       String
    utc_hour        Int

    // Relations
    group        organization_group @relation(fields: [group_id], references: [id])
    organization organization       @relation(fields: [organization_id], references: [id])

    // Indexes
    @@index([group_id])
    @@index([organization_id])
}

model group_admins {
    groupId String
    adminId String
    admin   user               @relation(fields: [adminId], references: [id])
    group   organization_group @relation(fields: [groupId], references: [id])

    @@unique([groupId, adminId])
    @@index([adminId])
}

model group_members {
    groupId  String
    memberId String
    member   user               @relation(fields: [memberId], references: [id])
    group    organization_group @relation(fields: [groupId], references: [id])

    @@unique([groupId, memberId])
    @@index([memberId])
}

// ORGANIZATION SETTINGS RESOURCES

model organization_note_template {
    // Fields
    id             Int     @id @default(autoincrement())
    organizationId String?
    name           String
    programId      Int? // Deprecated
    questions      Json // NoteTemplateQuestion[]
    is_public      Boolean @default(false)
    ai_prompt      String? @db.Text

    // Relations
    organization         organization?          @relation(fields: [organizationId], references: [id])
    note                 note[]
    custom_documentation custom_documentation[]
    group_settings       group_settings[]

    // Indexes
    @@index([organizationId])
    @@index([programId])
}

// SERVICE RECORD RESOURCES

// Deprecated
model attendance {
    id                        String                    @id @default(uuid())
    userId                    String
    adminId                   String
    date                      DateTime                  @default(now())
    timestamp                 DateTime                  @default(now()) // Deprecated
    present                   Boolean
    noteId                    String?
    programId                 Int
    updatedAt                 DateTime?                 @updatedAt
    currentTimeTrackingStatus time_tracking_event_type?
    totalTimeMin              Int?

    user                user                  @relation(name: "attendance_user", fields: [userId], references: [id])
    admin               user                  @relation(name: "attendance_admin", fields: [adminId], references: [id])
    note                note?                 @relation(fields: [noteId], references: [id])
    time_tracking_event time_tracking_event[]

    @@index([userId])
    @@index([adminId])
    @@index([noteId])
    @@index([programId])
}

enum service_record_status {
    DRAFT
    SIGNED
    COMPLETE // Used for absent SR which requires no further action
}

model service_record {
    // Fields
    id                           String                    @id // sr_{id}
    member_id                    String
    admin_id                     String
    organization_id              String
    group_id                     String
    date                         DateTime                  @db.Date
    status                       service_record_status     @default(DRAFT)
    service_provided             Boolean?
    current_time_tracking_status time_tracking_event_type?
    billable_time                Int?
    rounded_time                 Int?
    form_id                      String?                   @unique()
    last_updated_by              String?
    created_at                   DateTime                  @default(now())
    updated_at                   DateTime                  @updatedAt
    deleted_at                   DateTime?
    signed_at                    DateTime?
    signed_by                    String?
    missing_required_fields      String?
    deleted_key                  BigInt                    @default(0) // Special column for creating unique key to ensure only one non-deleted service record per member per day per group

    // Relations
    admin                             user                                @relation(name: "service_record_admin", fields: [admin_id], references: [id])
    member                            user                                @relation(name: "service_record_member", fields: [member_id], references: [id])
    signer                            user?                               @relation(name: "service_record_signer", fields: [signed_by], references: [id])
    last_updated_admin                user?                               @relation(name: "service_record_last_updated_by", fields: [last_updated_by], references: [id])
    organization                      organization                        @relation(fields: [organization_id], references: [id])
    group                             organization_group                  @relation(fields: [group_id], references: [id])
    form                              form?                               @relation(fields: [form_id], references: [id])
    custom_documentation              custom_documentation[]
    time_tracking_events              time_tracking_event[]
    task_data                         goal_task_data[]
    ai_service_record_interaction_log ai_service_record_interaction_log[]
    activity_views                    activity_view[]

    // Composite Unique Key
    @@unique([member_id, date, group_id, deleted_key])
    // Indexes
    @@index([member_id])
    @@index([admin_id])
    @@index([organization_id])
    @@index([group_id])
    @@index([signed_by])
    @@index([last_updated_by])
    // Composite indexes for dashboard home queries
    @@index([admin_id, status, deleted_at])
    @@index([group_id, status, deleted_at])
    @@index([group_id, service_provided, status, deleted_at])
    @@index([status, created_at, deleted_at])
}

model custom_documentation {
    // Fields
    id                String    @id // cdoc_{id}
    member_id         String
    admin_id          String
    organization_id   String
    service_record_id String
    template_id       Int
    template_data     Json?
    created_at        DateTime  @default(now())
    updated_at        DateTime  @updatedAt
    deleted_at        DateTime?

    // Relations
    member                            user                                @relation(name: "custom_documentation_member", fields: [member_id], references: [id])
    admin                             user                                @relation(name: "custom_documentation_admin", fields: [admin_id], references: [id])
    organization                      organization                        @relation(fields: [organization_id], references: [id])
    template                          organization_note_template          @relation(fields: [template_id], references: [id])
    service_record                    service_record                      @relation(fields: [service_record_id], references: [id])
    ai_service_record_interaction_log ai_service_record_interaction_log[]

    // Indexes
    @@index([member_id])
    @@index([admin_id])
    @@index([organization_id])
    @@index([template_id])
    @@index([service_record_id])
}

enum time_tracking_event_type {
    START
    PAUSE
    RESUME
    END
}

model time_tracking_event {
    id                String                   @id @default(uuid())
    memberId          String
    event             time_tracking_event_type
    pauseReason       String?
    timestamp         DateTime                 @default(now())
    attendanceId      String?
    service_record_id String
    group_id          String
    created_by        String?
    created_at        DateTime                 @default(now())
    updated_at        DateTime?                @updatedAt

    member         user               @relation(name: "time_tracking_event_member", fields: [memberId], references: [id])
    creator        user?              @relation(name: "time_tracking_event_creator", fields: [created_by], references: [id])
    attendance     attendance?        @relation(fields: [attendanceId], references: [id])
    service_record service_record     @relation(fields: [service_record_id], references: [id])
    group          organization_group @relation(fields: [group_id], references: [id])

    @@index([memberId])
    @@index([attendanceId])
    @@index([service_record_id])
    @@index([group_id])
    @@index([created_by])
}

model sales_dashboard_billing_details {
    user_auth_id                      String      @id
    app_base_monthly                  String
    app_base_yearly                   String
    admin_seat_monthly                String?
    admin_seat_yearly                 String?
    individual_seat_monthly           String?
    individual_seat_yearly            String?
    has_unlimited_admin_seats         Boolean     @default(false)
    has_unlimited_individual_seats    Boolean     @default(false)
    default_selected_admin_seats      Int?
    default_selected_individual_seats Int?
    hide_monthly                      Boolean     @default(false)
    account_type                      AccountType
    free_trial                        Boolean     @default(false)
    free_trial_end_date               DateTime?
    free_trial_days                   Int?

    user user @relation(fields: [user_auth_id], references: [auth_id])

    @@index([user_auth_id])
}

model audit_event {
    // Fields
    id         String   @id @default(uuid())
    type       String
    user       String
    resourceId String
    timestamp  DateTime @default(now())

    // Relations
    actor user @relation(fields: [user], references: [id])

    // Indexes
    @@index([user])
}

// LIFE PLAN RESOURCES

enum life_plan_goal_status {
    ACTIVE
    INACTIVE
    PAUSED
    COMPLETE
}

model life_plan_goal_group {
    group_id String
    goal_id  String

    group organization_group @relation(fields: [group_id], references: [id])
    goal  life_plan_goal     @relation(fields: [goal_id], references: [id])

    @@id([group_id, goal_id])
    @@index([group_id])
    @@index([goal_id])
}

enum timeframe_unit {
    DAY
    WEEK
    MONTH
    YEAR
}

model life_plan_goal_completion {
    // Fields
    id              String         @id @default(uuid())
    goal_id         String         @unique
    description     String?        @db.Text
    percent         Int
    timeframe_value Int
    timeframe_unit  timeframe_unit
    createdAt       DateTime       @default(now())
    deletedAt       DateTime?

    // Relations
    goal life_plan_goal @relation(fields: [goal_id], references: [id])

    @@index([goal_id])
}

model life_plan_goal {
    // Fields
    id                       String                @id @default(uuid())
    member_id                String
    organization_id          String
    title                    String
    description              String?               @db.Text
    status                   life_plan_goal_status
    group_id                 String?
    start_date               DateTime
    expected_completion_date DateTime?
    order                    Int?
    baseline_score           String?               @db.Text
    created_at               DateTime?             @default(now())
    updated_at               DateTime?             @updatedAt
    deleted_at               DateTime?

    // Relations
    tasks                     life_plan_goal_task[]
    organization              organization?              @relation(fields: [organization_id], references: [id])
    member                    user?                      @relation(fields: [member_id], references: [id])
    life_plan_goal_group      life_plan_goal_group[]
    life_plan_goal_completion life_plan_goal_completion?

    // Indexes
    @@index([organization_id])
    @@index([member_id])
}

enum life_plan_goal_task_type {
    BOOLEAN
    NUMERICAL
    SELECT
    MULTISELECT
    TEXT
    PARAGRAPH
}

enum life_plan_goal_task_display_type {
    LIST
    DROPDOWN
}

model life_plan_goal_task {
    // Fields
    id                   String                                  @id @default(uuid())
    text                 String                                  @db.Text
    goal_id              String
    member_id            String
    organization_id      String
    type                 life_plan_goal_task_type
    required             Boolean                                 @default(false)
    display_type         life_plan_goal_task_display_type?
    order                Int                                     @default(0)
    created_at           DateTime?                               @default(now())
    updated_at           DateTime?                               @updatedAt
    deleted_at           DateTime?
    conditional_operator life_plan_goal_task_condition_operator?

    // Relations
    goal                              life_plan_goal?                       @relation(fields: [goal_id], references: [id])
    member                            user?                                 @relation(fields: [member_id], references: [id])
    organization                      organization?                         @relation(fields: [organization_id], references: [id])
    controlling_other_tasks           life_plan_goal_task_condition[]       @relation("controlling_other_tasks")
    display_when_conditions           life_plan_goal_task_condition[]       @relation("display_when_conditions")
    select_options                    life_plan_goal_task_select_option[]
    numerical_option                  life_plan_goal_task_numerical_option?
    data                              goal_task_data[]
    ai_service_record_interaction_log ai_service_record_interaction_log[]

    // Indexes
    @@index([goal_id])
    @@index([member_id])
    @@index([organization_id])
}

enum life_plan_goal_task_condition_operator {
    AND
    OR
}

enum life_plan_goal_task_condition_evaluator_type {
    EQUALS
    NOT_EQUALS
    LESS_THAN
    LESS_THAN_EQUAL
    GREATER_THAN
    GREATER_THAN_EQUAL
    INCLUDES
    DOES_NOT_INCLUDE
}

model life_plan_goal_task_condition {
    id               String                                       @id @default(uuid())
    task_id          String
    condition_on     String?
    value            Json
    evaluator        life_plan_goal_task_condition_evaluator_type
    created_at       DateTime                                     @default(now())
    deleted_at       DateTime?
    task             life_plan_goal_task                          @relation(name: "display_when_conditions", fields: [task_id], references: [id])
    conditional_task life_plan_goal_task?                         @relation(name: "controlling_other_tasks", fields: [condition_on], references: [id])

    @@index([task_id])
    @@index([condition_on])
}

model life_plan_goal_task_select_option {
    id         String    @id @default(uuid())
    task_id    String
    label      String
    order      Int?
    score      Int?
    created_at DateTime  @default(now())
    deleted_at DateTime?

    task           life_plan_goal_task @relation(fields: [task_id], references: [id])
    goal_task_data goal_task_data[]

    @@index([task_id])
}

model life_plan_goal_task_numerical_option {
    id      String @id @default(uuid())
    task_id String @unique()
    min     Int?
    max     Int?
    step    Float?

    task life_plan_goal_task @relation(fields: [task_id], references: [id])

    @@index([task_id])
}

model life_plan_task_option_library {
    id              String                                 @id @default(uuid())
    organization_id String?
    name            String
    is_public       Boolean                                @default(false)
    options         life_plan_task_option_library_option[]
    created_at      DateTime                               @default(now())
    deleted_at      DateTime?

    organization organization? @relation(fields: [organization_id], references: [id])

    @@index([organization_id])
}

model life_plan_task_option_library_option {
    id         String    @id @default(uuid())
    library_id String
    label      String
    order      Int
    score      Int?
    created_at DateTime  @default(now())
    deleted_at DateTime?

    library life_plan_task_option_library @relation(fields: [library_id], references: [id])

    @@index([library_id])
}

model goal_task_data {
    id                String   @id @default(uuid())
    task_id           String
    service_record_id String?
    response          Json?
    created_at        DateTime @default(now())

    task             life_plan_goal_task                 @relation(fields: [task_id], references: [id])
    service_record   service_record?                     @relation(fields: [service_record_id], references: [id])
    selected_options life_plan_goal_task_select_option[]

    @@unique([task_id, service_record_id])
    @@index([task_id])
    @@index([service_record_id])
}

// MEDICAL RESOURCES

model observation_codes {
    id          Int           @id @default(autoincrement())
    code        String
    system      String
    name        String
    display     String
    units       Json
    observation observation[]
}

model observation {
    id        String   @id @default(uuid())
    memberId  String
    codeId    Int
    value     Float
    unit      String
    date      DateTime @default(now())
    createdAt DateTime @default(now())

    code observation_codes @relation(fields: [codeId], references: [id])

    @@index([codeId])
}

model medical_history {
    memberId              String  @id
    blood_type            String? @db.Text
    medications           String? @db.Text
    medication_at_program String? @db.Text
    allergies             String? @db.Text
    dietary_restrictions  String? @db.Text
    eating_habits         String? @db.Text
    mobility              String? @db.Text
    adaptive_equipment    String? @db.Text
    communication         String? @db.Text
    supervision           String? @db.Text
    behavior_management   String? @db.Text
    primary_diagnosis     String?
    other_diagnosis       String? @db.Text
    medical_requirements  String? @db.Text
}

enum medication_status {
    ACTIVE
    INACTIVE
}

enum medication_route {
    ORAL
    TOPICAL
    AURAL
    BUCCAL
    G_TUBED
    INHALED
    INTRAMUSCULAR
    INTRAVENOUS
    J_TUBED
    NASAL
    NEBULIZED
    OPTIC
    RECTAL
    SUBCUTANEOUS
    SUBLINGUAL
    TRANSDERMAL
    VAGINAL
    OTHER
}

enum medication_controlled_substance_schedule {
    UNKNOWN
    SCHEDULE_1
    SCHEDULE_2
    SCHEDULE_3
    SCHEDULE_4
    SCHEDULE_5
}

enum medication_type {
    PRESCRIPTION
    OTC
    SUPPLEMENT
}

model medication {
    // Fields
    id                               String                                    @id // med_{id}
    member_id                        String
    organization_id                  String
    name                             String
    dosage                           String?
    type                             medication_type?
    route                            medication_route?
    route_other                      String?
    prescribing_doctor               String?
    rx_number                        String?
    rxcui                            String? // RxNorm CUI
    status                           medication_status                         @default(ACTIVE)
    purpose                          String?                                   @db.Text
    side_effects                     String?                                   @db.Text
    instructions                     String?                                   @db.Text
    comments                         String?                                   @db.Text
    is_controlled_substance          Boolean                                   @default(false)
    is_controlled_substance_schedule medication_controlled_substance_schedule?
    is_tracking_enabled              Boolean                                   @default(false)
    created_at                       DateTime                                  @default(now())
    updated_at                       DateTime                                  @updatedAt
    deleted_at                       DateTime?

    // Relations
    member           user                               @relation(fields: [member_id], references: [id])
    organization     organization                       @relation(fields: [organization_id], references: [id])
    frequency        medication_frequency[]
    mar              medication_administration_record[]
    medication_files medication_file[]

    // Indexes
    @@index([member_id])
    @@index([organization_id])
}

enum medication_frequency_type {
    PRN // As needed
    DAILY
    CUSTOM
}

model medication_frequency {
    // Fields
    id            String                    @id // mfq_{id}
    member_id     String
    medication_id String
    frequency     medication_frequency_type
    hour          Int? // 0-23 for hour of the day (required if frequency is NOT PRN)
    minute        Int? // 0-59 for minute of the hour (required if frequency is NOT PRN)
    custom        Json? // MedicationFrequencyCustomData (only used if frequency is CUSTOM)
    start_date    DateTime                  @default(now())
    end_date      DateTime?
    created_at    DateTime                  @default(now())
    updated_at    DateTime                  @updatedAt
    deleted_at    DateTime?

    // Relations
    medication medication                         @relation(fields: [medication_id], references: [id])
    mar        medication_administration_record[]

    // Indexes
    @@index([medication_id])
}

enum mar_administration_status {
    ADMINISTERED_CORRECTLY
    ADMINISTERED_INCORRECTLY
    NOT_ADMINISTERED
    NOT_REQUIRED
    UPCOMING
}

enum mar_incorrect_reason {
    REFUSAL
    MED_NOT_AVAILABLE
    WRONG_MED
    WRONG_DOSE
    WRONG_TIME
    WRONG_ROUTE
    NOT_GIVEN
    OTHER
}

model medication_administration_record {
    // Fields
    id                String                    @id // mar_{id}
    member_id         String
    medication_id     String
    frequency_id      String
    date              DateTime                  @db.Date
    status            mar_administration_status
    incorrect_reason  mar_incorrect_reason?
    note              String?                   @db.Text
    follow_up         String?                   @db.Text
    form_id           String?                   @unique
    created_by_system Boolean                   @default(true)
    created_by        String?
    administered_at   DateTime?
    created_at        DateTime                  @default(now())
    updated_at        DateTime                  @updatedAt
    deleted_at        DateTime?
    deleted_key       BigInt                    @default(0)
    repeat_index      Int                       @default(0) // Ensures one record per member/day/group

    // Relations
    form       form?                @relation(fields: [form_id], references: [id])
    medication medication           @relation(fields: [medication_id], references: [id])
    frequency  medication_frequency @relation(fields: [frequency_id], references: [id])
    member     user                 @relation(fields: [member_id], references: [id])
    creator    user?                @relation("mar_creator", fields: [created_by], references: [id])

    // Composite Unique Key
    @@unique([member_id, date, frequency_id, deleted_key, repeat_index])
    // Indexes
    @@index([member_id])
    @@index([frequency_id])
    @@index([medication_id])
    @@index([form_id])
    @@index([created_by])
}

// FILE RESOURCES

model file {
    // Fields
    id               String            @id @default(uuid())
    name             String
    type             String
    size             Int               @default(0)
    uploadConfirmed  Boolean           @default(false)
    createdAt        DateTime          @default(now())
    createdBy        String
    updatedAt        DateTime?         @updatedAt
    deletedAt        DateTime?
    member_files     member_file[]
    group_files      group_file[]
    admin_files      admin_file[]
    quick_note_files quick_note_file[]
    medication_files medication_file[]

    form            form?
    task_files      task_file[]
    folder_id       String?
    organization_id String?
    userId          String?

    // Relations
    folder       folder?       @relation(fields: [folder_id], references: [id])
    organization organization? @relation(fields: [organization_id], references: [id])
    user         user?         @relation(fields: [userId], references: [id])

    // Indexes
    @@index([folder_id])
    @@index([organization_id])
    @@index([userId])
}

model task_file {
    id     String @id @default(uuid())
    taskId String

    file file @relation(fields: [id], references: [id])
    task task @relation(fields: [taskId], references: [id])

    @@index([id])
    @@index([taskId])
}

model quick_note_file {
    id            String     @id @default(uuid())
    quick_note_id String
    file          file       @relation(fields: [id], references: [id])
    quick_note    quick_note @relation(fields: [quick_note_id], references: [id])

    @@index([id])
    @@index([quick_note_id])
}

model member_file {
    id         String    @id @default(uuid())
    memberId   String
    deleted_at DateTime?

    file file @relation(fields: [id], references: [id])

    @@index([id])
}

model group_file {
    id         String    @id @default(uuid())
    groupId    String
    deleted_at DateTime?

    file file @relation(fields: [id], references: [id])

    @@index([id])
}

model medication_file {
    id            String @id @default(uuid())
    medication_id String @unique

    file       file       @relation(fields: [id], references: [id])
    medication medication @relation(fields: [medication_id], references: [id])

    @@index([id])
    @@index([medication_id])
}

model admin_file {
    id         String    @id @default(uuid())
    adminId    String
    deleted_at DateTime?

    file file @relation(fields: [id], references: [id])

    @@index([id])
}

model folder {
    // Fields
    id               String  @id @default(uuid())
    name             String
    parent_folder_id String?
    created_by       String
    organization_id  String

    created_at DateTime  @default(now())
    updated_at DateTime? @updatedAt
    deleted_at DateTime?

    // Relations
    parent_folder  folder?         @relation("folders", fields: [parent_folder_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    child_folders  folder[]        @relation("folders")
    files          file[]
    group_folders  group_folder[]
    member_folders member_folder[]
    admin_folders  admin_folder[]
    organization   organization    @relation(fields: [organization_id], references: [id])
    user           user?           @relation(fields: [userId], references: [id])
    userId         String?

    // Indexes
    @@index([parent_folder_id])
    @@index([organization_id])
    @@index([created_by])
    @@index([userId])
}

model group_folder {
    id        String @id @default(uuid())
    group_id  String
    folder_id String

    folder folder @relation(fields: [folder_id], references: [id], onDelete: Cascade)

    @@index([group_id])
    @@index([folder_id])
}

model member_folder {
    id        String @id @default(uuid())
    member_id String
    folder_id String

    folder folder @relation(fields: [folder_id], references: [id], onDelete: Cascade)

    @@index([member_id])
    @@index([folder_id])
}

model admin_folder {
    id        String @id @default(uuid())
    admin_id  String
    folder_id String

    folder folder @relation(fields: [folder_id], references: [id], onDelete: Cascade)

    @@index([admin_id])
    @@index([folder_id])
}

// TASK RESOURCES

model task {
    id             String    @id @default(uuid())
    organizationId String
    name           String
    text           String    @db.Text
    promptOn       String?
    memberId       String?
    fileId         String?
    dueAt          DateTime?
    createdAt      DateTime  @default(now())
    deletedAt      DateTime?

    member         user?           @relation(fields: [memberId], references: [id])
    task_assignees task_assignee[]
    task_files     task_file[]

    @@index([fileId])
    @@index([memberId])
}

model task_assignee {
    id              String    @id @default(uuid())
    taskId          String
    userId          String
    assignedAt      DateTime  @default(now())
    completedAt     DateTime?
    lastDismissedAt DateTime?

    user user @relation(fields: [userId], references: [id])
    task task @relation(fields: [taskId], references: [id])

    @@index([userId])
    @@index([taskId])
}

// QUICK NOTE RESOURCES

model quick_note {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    title     String
    text      String    @db.Text

    authorId String
    author   user   @relation(fields: [authorId], references: [id])

    mention mention[]
    files   quick_note_file[]

    @@index([authorId])
}

model mention {
    id       String  @id @default(uuid())
    memberId String?
    adminId  String?
    groupId  String?

    quickNoteId String

    member user?               @relation(name: "member_mention", fields: [memberId], references: [id])
    admin  user?               @relation(name: "admin_mention", fields: [adminId], references: [id])
    group  organization_group? @relation(fields: [groupId], references: [id])
    note   quick_note          @relation(fields: [quickNoteId], references: [id])

    @@index([memberId])
    @@index([adminId])
    @@index([groupId])
    @@index([quickNoteId])
}

//AI RESOURCES

enum ai_feedback_rating {
    LIKE
    DISLIKE
}

model ai_chat_feedback {
    // Fields
    id               String               @id @default(uuid())
    conversation_id  String?
    message_id       String
    user_id          String
    organization_id  String?
    rating           ai_feedback_rating
    comment          String?              @db.Text
    created_at       DateTime             @default(now())
    updated_at       DateTime             @updatedAt

    // Relations
    user          user           @relation(fields: [user_id], references: [id])
    organization  organization?  @relation(fields: [organization_id], references: [id])

    // Indexes & Constraints
    @@unique([user_id, message_id])
    @@index([organization_id, created_at])
    @@index([conversation_id])
    @@index([message_id])
}

model ai_service_record_interaction_log {
    // Fields
    id                      String    @id // ai_sr_{id}
    input                   Json?
    output                  Json?
    user_id                 String?
    organization_id         String?
    service_record_id       String?
    custom_documentation_id String?
    success                 Boolean   @default(true)
    feedback                Json?
    accepted                Boolean?
    life_plan_goal_task_id  String?
    created_at              DateTime  @default(now())
    updated_at              DateTime  @updatedAt
    deleted_at              DateTime?

    // Relations
    user                 user?                 @relation(name: "ai_user", fields: [user_id], references: [id])
    custom_documentation custom_documentation? @relation(fields: [custom_documentation_id], references: [id])
    service_record       service_record?       @relation(fields: [service_record_id], references: [id])
    life_plan_goal_task  life_plan_goal_task?  @relation(fields: [life_plan_goal_task_id], references: [id])

    //Indexes
    @@index([user_id])
    @@index([organization_id])
    @@index([service_record_id])
    @@index([custom_documentation_id])
    @@index([life_plan_goal_task_id])
}

// FORMS

model form {
    // Fields
    id              String    @id // ir_{id}
    type            String
    member_id       String
    organization_id String
    data            Json // FormData
    date            DateTime
    file_id         String?   @unique
    created_by      String
    created_at      DateTime  @default(now())
    updated_at      DateTime  @updatedAt
    deleted_at      DateTime?

    // Relations
    member                           user                              @relation(name: "form_member", fields: [member_id], references: [id])
    author                           user                              @relation(name: "form_author", fields: [created_by], references: [id])
    organization                     organization                      @relation(fields: [organization_id], references: [id])
    template                         form_template?                    @relation(fields: [type], references: [id])
    file                             file?                             @relation(fields: [file_id], references: [id])
    medication_administration_record medication_administration_record?
    service_record                   service_record?

    // Indexes
    @@index([type])
    @@index([file_id])
    @@index([member_id])
    @@index([created_by])
    @@index([organization_id])
}

enum form_template_type {
    INCIDENT_REPORT
    MEDICATION_ERROR_REPORT
    ORG_CUSTOM
}

model form_template {
    // Fields
    id            String             @id // Ex: "ct_ir_255"
    name          String
    type          form_template_type
    state         State?
    schema        Json
    is_exportable Boolean            @default(false)

    // Relations
    organizations form_template_organization[]
    form          form[]
}

model form_template_organization {
    // Fields
    organization_id  String
    form_template_id String

    // Relations
    organization  organization  @relation(fields: [organization_id], references: [id])
    form_template form_template @relation(fields: [form_template_id], references: [id])

    // Indexes
    @@unique([organization_id, form_template_id])
    @@index([organization_id])
    @@index([form_template_id])
}

// FACT SHEET

model fact_sheet {
    // Fields
    id     String @id // Ex: "fct_sht_ct"
    name   String
    schema Json // FactSheetSchema
    state  State
}

model auth_role {
    // Fields
    id              String    @id @default(uuid())
    organization_id String?
    name            String
    description     String?
    is_public       Boolean   @default(false)
    created_at      DateTime  @default(now())
    updated_at      DateTime  @updatedAt
    deleted_at      DateTime?

    // Relations
    organization organization? @relation(fields: [organization_id], references: [id])
    users        user[]

    // Indexes
    @@index([organization_id])
}

model saved_story {
    // Fields
    id            String   @id @default(uuid())
    user_id       String
    prompt        String
    story         String   @db.Text
    length        String
    reading_level String
    favorite      Boolean  @default(false)
    created_at    DateTime @default(now())
    updated_at    DateTime @updatedAt

    // Relations
    user user @relation(fields: [user_id], references: [id])

    // Indexes
    @@index([user_id])
}

model chat_template {
    id              String    @id @default(uuid())
    organization_id String?
    prompt          String    @db.Text
    title           String
    created_at      DateTime  @default(now())
    updated_at      DateTime  @updatedAt
    deleted_at      DateTime?
    is_public       Boolean   @default(false)

    organization organization? @relation(fields: [organization_id], references: [id])

    @@index([organization_id])
}

model saved_coloring_page {
    id              String   @id @default(uuid())
    user_id         String
    organization_id String?
    prompt          String
    url             String?  @db.Text
    file_id         String?
    favorite        Boolean  @default(false)
    created_at      DateTime @default(now())
    updated_at      DateTime @updatedAt

    // Relations
    user         user          @relation(fields: [user_id], references: [id])
    organization organization? @relation(fields: [organization_id], references: [id])

    @@index([user_id])
    @@index([organization_id])
}

// STAFF SCHEDULE
model staff_schedule {
    id                      String                   @id @default(uuid())
    organization_id         String
    name                    String
    staff_schedule_programs staff_schedule_program[]
    file_url                String?
    active                  Boolean                  @default(true)

    created_at             DateTime                @default(now())
    updated_at             DateTime                @updatedAt
    deleted_at             DateTime?
    staff_schedule_members staff_schedule_member[]
    staff_schedule_groups  staff_schedule_group[]

    @@index([organization_id])
}

model staff_schedule_program {
    id                     String                  @id @default(uuid())
    organization_id        String
    name                   String
    created_at             DateTime                @default(now())
    updated_at             DateTime                @updatedAt
    deleted_at             DateTime?
    total_number_of_admins Int?
    total_open_slots       Int?
    staff_schedule_id      String
    staff_schedule         staff_schedule          @relation(fields: [staff_schedule_id], references: [id])
    staff_schedule_groups  staff_schedule_group[]
    staff_schedule_members staff_schedule_member[]

    @@index([staff_schedule_id])
}

model staff_schedule_group {
    id                        String    @id @default(uuid())
    organization_id           String
    name                      String?
    created_at                DateTime  @default(now())
    updated_at                DateTime  @updatedAt
    deleted_at                DateTime?
    staff_schedule_program_id String
    staff_schedule_id         String
    ratio                     String?
    open_slots                Int?

    staff_schedule         staff_schedule          @relation(fields: [staff_schedule_id], references: [id])
    staff_schedule_program staff_schedule_program  @relation(fields: [staff_schedule_program_id], references: [id])
    staff_schedule_members staff_schedule_member[]

    organizationId String?

    @@index([staff_schedule_program_id])
    @@index([staff_schedule_id])
}

model staff_schedule_member {
    id                        String    @id @default(uuid())
    organization_id           String
    name                      String
    created_at                DateTime  @default(now())
    updated_at                DateTime  @updatedAt
    deleted_at                DateTime?
    staff_schedule_program_id String
    staff_schedule_group_id   String?
    staff_schedule_id         String
    ratio                     String
    csv_row_number            Int?

    conflicts_source_member staff_schedule_member_conflict[] @relation("source_member_id")
    conflicts_with          staff_schedule_member_conflict[] @relation("conflict_member")
    staff_schedule_group    staff_schedule_group?            @relation(fields: [staff_schedule_group_id], references: [id])
    staff_schedule_program  staff_schedule_program           @relation(fields: [staff_schedule_program_id], references: [id])
    staff_schedule          staff_schedule                   @relation(fields: [staff_schedule_id], references: [id])
    comments                staff_schedule_comment[]

    @@index([staff_schedule_group_id])
    @@index([staff_schedule_program_id])
    @@index([staff_schedule_id])
}

model staff_schedule_member_conflict {
    id               String @id @default(uuid())
    source_member_id String
    conflict_with    String

    member          staff_schedule_member @relation("source_member_id", fields: [source_member_id], references: [id])
    conflict_member staff_schedule_member @relation("conflict_member", fields: [conflict_with], references: [id])

    @@unique([source_member_id, conflict_with])
    @@index([source_member_id])
    @@index([conflict_with])
}

model staff_schedule_comment {
    id                       String                @id @default(uuid())
    organization_id          String
    comment                  String
    commenter_id             String?
    created_at               DateTime              @default(now())
    updated_at               DateTime              @updatedAt
    deleted_at               DateTime?
    staff_schedule_member_id String
    staff_schedule_member    staff_schedule_member @relation(fields: [staff_schedule_member_id], references: [id])

    @@index([staff_schedule_member_id])
}
